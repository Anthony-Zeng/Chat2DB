"use strict";(self.webpackChunkchat_2_db=self.webpackChunkchat_2_db||[]).push([[84886],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(r),y=o,f=p["".concat(u,".").concat(y)]||p[y]||d[y]||i;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=y;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},11414:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>p});r(67294);var n=r(3905);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const s={title:"Verify Webhooks Using Dyte's Signature",sidebar_position:4},u=void 0,l={unversionedId:"webhooks/signatures",id:"webhooks/signatures",title:"Verify Webhooks Using Dyte's Signature",description:"Dyte verifies the webhook events it sends to your endpoints by including a",source:"@site/docs/guides/webhooks/signatures.mdx",sourceDirName:"webhooks",slug:"/webhooks/signatures",permalink:"/guides/webhooks/signatures",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/guides/webhooks/signatures.mdx",tags:[],version:"current",lastUpdatedAt:1682414612,formattedLastUpdatedAt:"Apr 25, 2023",sidebarPosition:4,frontMatter:{title:"Verify Webhooks Using Dyte's Signature",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Webhook Events List",permalink:"/guides/webhooks/webhook-events"},next:{title:"Interactive Livestreaming",permalink:"/guides/livestream/"}},c={},p=[{value:"Obtain our public key",id:"obtain-our-public-key",level:2},{value:"Check for the signature header",id:"check-for-the-signature-header",level:2},{value:"Verify the signature",id:"verify-the-signature",level:2},{value:"Sample code",id:"sample-code",level:3}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},y=d("Tabs"),f=d("TabItem"),b={toc:p},h="wrapper";function g(e){var{components:t}=e,r=a(e,["components"]);return(0,n.kt)(h,i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){o(e,t,r[t])}))}return e}({},b,r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Dyte verifies the webhook events it sends to your endpoints by including a\nsignature in the dyte-signature header of each event. This allows you to confirm\nthat the event came from Dyte and not a malicious server impersonating Dyte."),(0,n.kt)("p",null,"Perform the following steps to verify signatures."),(0,n.kt)("h2",{id:"obtain-our-public-key"},"Obtain our public key"),(0,n.kt)("p",null,"Our public key is available at\n",(0,n.kt)("inlineCode",{parentName:"p"},"https://api.cluster.dyte.in/.well-known/webhooks.json"),". You can obtain it by\nmaking a GET request to this endpoint."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'curl -X GET "https://api.cluster.dyte.in/.well-known/webhooks.json"\n')),(0,n.kt)("h2",{id:"check-for-the-signature-header"},"Check for the signature header"),(0,n.kt)("p",null,"Every incoming request will have a custom ",(0,n.kt)("inlineCode",{parentName:"p"},"dyte-signature")," header. This is the\nvalue that you should verify in the next step."),(0,n.kt)("h2",{id:"verify-the-signature"},"Verify the signature"),(0,n.kt)("p",null,"The signature is based on the ",(0,n.kt)("inlineCode",{parentName:"p"},"RSA-SHA256")," digest of the request payload. You\ncan calculate this on your end and compare it against the one supplied in the\nheader. If the two values are equal, you can safely consider that this request\nindeed originated from Dyte."),(0,n.kt)("h3",{id:"sample-code"},"Sample code"),(0,n.kt)(y,{mdxType:"Tabs"},(0,n.kt)(f,{value:"node",label:"Node.js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const crypto = require('crypto');\n\napp.post('/webhook', express.json({ type: 'application/json' }), (req, res) => {\n  const signature = req.headers['dyte-signature'];\n  const payload = req.body;\n\n  const isVerified = crypto.verify(\n    'RSA-SHA256',\n    Buffer.from(JSON.stringify(payload)),\n    dytePublicKey,\n    Buffer.from(signature, 'base64')\n  );\n  // ... do further processing\n});\n")))))}g.isMDXComponent=!0}}]);