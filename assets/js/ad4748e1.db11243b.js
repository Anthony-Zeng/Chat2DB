"use strict";(self.webpackChunkchat_2_db=self.webpackChunkchat_2_db||[]).push([[8680],{35674:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>b,frontMatter:()=>a,metadata:()=>u,toc:()=>d});r(67294);var n=r(3905);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const a={title:"How to work with Plugin Stores",sidebar_position:1},l=void 0,u={unversionedId:"guides/how-to-work-with-plugin-stores",id:"guides/how-to-work-with-plugin-stores",title:"How to work with Plugin Stores",description:"The plugin SDK offers a realtime key-value database. This can be accessed under",source:"@site/docs/plugin-sdk/guides/how-to-work-with-plugin-stores.mdx",sourceDirName:"guides",slug:"/guides/how-to-work-with-plugin-stores",permalink:"/plugin-sdk/guides/how-to-work-with-plugin-stores",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/plugin-sdk/guides/how-to-work-with-plugin-stores.mdx",tags:[],version:"current",lastUpdatedAt:1682490638,formattedLastUpdatedAt:"Apr 26, 2023",sidebarPosition:1,frontMatter:{title:"How to work with Plugin Stores",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Operations on Store",permalink:"/plugin-sdk/usage/stores-api/manage-stores"},next:{title:"Exchange data between plugin and meeting",permalink:"/plugin-sdk/guides/exchange-data-between-plugin-and-meeting"}},c={},d=[{value:"Creating stores",id:"creating-stores",level:3},{value:"Subscribing to stores changes",id:"subscribing-to-stores-changes",level:3},{value:"Updating the store",id:"updating-the-store",level:3}],p={toc:d},g="wrapper";function b(e){var{components:t}=e,r=i(e,["components"]);return(0,n.kt)(g,s(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){o(e,t,r[t])}))}return e}({},p,r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The plugin SDK offers a realtime key-value database. This can be accessed under\nthe ",(0,n.kt)("inlineCode",{parentName:"p"},"plugin.stores")," modules"),(0,n.kt)("p",null,"There are a bunch of things you can do with plugin stores. Like\ncreating/deleting stores and basic CRUD operation on every store."),(0,n.kt)("h3",{id:"creating-stores"},"Creating stores"),(0,n.kt)("p",null,"Stores can be global or local. Local stores are available only to the user that\ncreated them while global stores are available to everyone."),(0,n.kt)("admonition",{title:"important",type:"danger"},(0,n.kt)("p",{parentName:"admonition"},"Store creation is a local event. It is recommended that it occurs for all\nclients.")),(0,n.kt)("p",null,"Here's how you can create a store:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"    // create a global store\n    const videoStore = plugin.stores.create('youtube');\n\n    // create a local store\n    const my-playlist = plugin.stores.create('private-playlist', { local: true });\n")),(0,n.kt)("h3",{id:"subscribing-to-stores-changes"},"Subscribing to stores changes"),(0,n.kt)("p",null,"Once a store is created the next step would be to subscribe to changes. It is\nrecommended that you do this just after the store is created."),(0,n.kt)("p",null,"You can subscribe to a particular key in the store like so. Please note that you\ndo not need to define a key before subscribing to it."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"    const videoStore = plugin.stores.create('youtube');\n    videoStore.subscribe('video', (data) => {\n        ...\n    });\n")),(0,n.kt)("h3",{id:"updating-the-store"},"Updating the store"),(0,n.kt)("p",null,"Updating a key in the store is an asynchronous task. When a user updates the\nstore, it will be updated for all users."),(0,n.kt)("p",null,"All users subscribed to the store will receive a notification for it."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const button = document.getElementById('play-video');\nbutton.addEventListener('click', async () => {\n  await videoStore.set('video', {\n    url: 'https://www.youtube.com/watch?v=UGl4XZ_zr5w',\n  });\n  const vid = videoStore.get('video');\n});\n")))}b.isMDXComponent=!0}}]);