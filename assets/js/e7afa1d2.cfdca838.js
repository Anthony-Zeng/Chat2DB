"use strict";(self.webpackChunkchat_2_db=self.webpackChunkchat_2_db||[]).push([[90220],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,h=d["".concat(l,".").concat(g)]||d[g]||u[g]||i;return n?a.createElement(h,p(p({ref:t},s),{},{components:n})):a.createElement(h,p({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,p[1]=o;for(var c=2;c<i;c++)p[c]=n[c];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},11449:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const o={title:"Participant Events",description:"Event handling for participants.",sidebar_position:3,tags:["flutter-core","participants","self"]},l=void 0,c={unversionedId:"participants/events",id:"participants/events",title:"Participant Events",description:"Event handling for participants.",source:"@site/docs/flutter-core/participants/events.mdx",sourceDirName:"participants",slug:"/participants/events",permalink:"/flutter-core/participants/events",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/flutter-core/participants/events.mdx",tags:[{label:"flutter-core",permalink:"/flutter-core/tags/flutter-core"},{label:"participants",permalink:"/flutter-core/tags/participants"},{label:"self",permalink:"/flutter-core/tags/self"}],version:"current",lastUpdatedAt:1682414573,formattedLastUpdatedAt:"Apr 25, 2023",sidebarPosition:3,frontMatter:{title:"Participant Events",description:"Event handling for participants.",sidebar_position:3,tags:["flutter-core","participants","self"]},sidebar:"tutorialSidebar",previous:{title:"The participant object",permalink:"/flutter-core/participants/participant-object"},next:{title:"Introducing chat",permalink:"/flutter-core/chat/introduction"}},s={},d=[{value:"Page change",id:"page-change",level:2},{value:"Participant joined",id:"participant-joined",level:2},{value:"Participant updated",id:"participant-updated",level:2},{value:"Participant left",id:"participant-left",level:2},{value:"Video update",id:"video-update",level:2},{value:"Video view",id:"video-view",level:2},{value:"Audio update",id:"audio-update",level:2},{value:"Screen share update",id:"screen-share-update",level:2},{value:"Screen share participants list",id:"screen-share-participants-list",level:2},{value:"Screen share view",id:"screen-share-view",level:2},{value:"Participants updated",id:"participants-updated",level:2},{value:"Active Participants changed",id:"active-participants-changed",level:2},{value:"Plugin view",id:"plugin-view",level:2}],u={toc:d},g="wrapper";function h(e){var{components:t}=e,n=p(e,["components"]);return(0,a.kt)(g,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"page-change"},"Page change"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onParticipantsUpdated({\n   required DyteRoomParticipants participants,\n   required DyteGridPagesInfo gridPagesInfo,\n}) {\n   // your code here to handle page updates.\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"DyteGridPagesInfo")," can be used for pagination purposes and contains following\ninfo:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pageCount"),": Total page that will contain all the participants."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"currentPageNumber"),": Current page number that was returned (indexed from 0)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shouldShowPaginator"),": Should it show paginator or not. (dots at the bottom of\nthe Video Views)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isNextPagePossible"),": Bool whether the next page is available or not."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isPreviousPagePossible"),": Bool whether the previous page is available or not.")),(0,a.kt)("h2",{id:"participant-joined"},"Participant joined"),(0,a.kt)("p",null,"Trigger an event when any participant joins the meeting."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onParticipantUpdated(DyteMeetingParticipant participant) {\n         // your code here to handle new participant\n}\n")),(0,a.kt)("h2",{id:"participant-updated"},"Participant updated"),(0,a.kt)("p",null,"Trigger an event when any participant update in meet."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onParticipantUpdated(DyteMeetingParticipant participant) {\n         // your code here to handle new participant\n}\n")),(0,a.kt)("h2",{id:"participant-left"},"Participant left"),(0,a.kt)("p",null,"Trigger an event when any participant leaves the meeting."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onParticipantLeave(DyteMeetingParticipant participant) {\n         // your code here to handle participant left from meeting\n}\n")),(0,a.kt)("h2",{id:"video-update"},"Video update"),(0,a.kt)("p",null,"Trigger an event when any participant starts / stops video."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid videoUpdate({\n required bool videoEnabled,\n required DyteMeetingParticipant participant,\n}) {\n         // your code here to handle participant video toggle update\n}\n")),(0,a.kt)("h2",{id:"video-view"},"Video view"),(0,a.kt)("p",null,"To get video view of a participant, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"view-type")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"DytePlatformVideoView"),","),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"const viewType = \u2018DytePlatformVideoView\u2019;\n\n\n// pass the creation parameters:\n\n\nfinal Map<String, dynamic> creationParams = {\n\u2018id\u2019:  meetingParticipant.id,  // [String] Participant ID\n\u2018isSelfParticipant\u2019: isSelfParticipant // [bool] whether the participant whose view is requested is same as the mobileClient or not.\n};\n")),(0,a.kt)("h2",{id:"audio-update"},"Audio update"),(0,a.kt)("p",null,"Trigger an event when any participant starts / stops audio."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid audioUpdate({\n required bool audioEnabled,\n required DyteMeetingParticipant participant,\n}) {\n         // your code here to handle participant audio toggle update\n}\n")),(0,a.kt)("h2",{id:"screen-share-update"},"Screen share update"),(0,a.kt)("p",null,"Trigger an event when any participant starts / stops screen share."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onScreenSharesUpdated() {\n   // all screenshare participants can be fetched via\n   // dyteClient.participants.screenshares\n}\n")),(0,a.kt)("h2",{id:"screen-share-participants-list"},"Screen share participants list"),(0,a.kt)("p",null,"Obtain the list of the screenshare participants, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"participants.screenshares")," function which returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"DyteRoomParticipants")," object that maintains a record of participants who have joined, pinned, and screenshared. This object updates with each ",(0,a.kt)("inlineCode",{parentName:"p"},"onUpdate")," call."),(0,a.kt)("h2",{id:"screen-share-view"},"Screen share view"),(0,a.kt)("p",null,"To get the screenshare view, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"view-type")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"DytePlatformScreenshareView"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"const viewType = \u2018DytePlatformScreenshareView\u2019\n")),(0,a.kt)("p",null,"You can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"ID")," in creation parameter as the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final Map<String, dynamic> creationParams = {\n      'peerId': screensharePeer.id,\n    };\n\n\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"screensharePeer")," is an element of the ",(0,a.kt)("inlineCode",{parentName:"p"},"participants.screenshares")," list."),(0,a.kt)("h2",{id:"participants-updated"},"Participants updated"),(0,a.kt)("p",null,"Triggers an event when participants are updated, and therefore return the new\n",(0,a.kt)("inlineCode",{parentName:"p"},"DyteGridPagesInfo"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onParticipantsUpdated({\n required DyteRoomParticipants participants,\n required DyteGridPagesInfo gridPagesInfo,\n}){\n   // whenever participants are updated in the room\n   // it returns a updated `DyteRoomParticipants` and `DyteGridPagesInfo` with it.\n}\n")),(0,a.kt)("h2",{id:"active-participants-changed"},"Active Participants changed"),(0,a.kt)("p",null,"Trigger when active participant changes, for ex. when you move to next page of\nparticipant, this state gives you the participants of this current page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onActiveParticipantsChanged({required List<DyteMeetingParticipant> activeParticipants}) {\n   /// these active participants return new page participants\n}\n")),(0,a.kt)("p",null,"Other callbacks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onActiveSpeakerChanged(DyteMeetingParticipant participant)"),": Triggered when active speaker is changed to ",(0,a.kt)("code",null,"participant"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onNoActiveSpeaker()"),": Triggered when there is no active participant."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onParticipantPinned(DyteMeetingParticipant participant)"),": Triggered when the ",(0,a.kt)("code",null,"participant")," is pinned."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onParticipantUnpinned()"),": Trigerred when participant is unpinned.")),(0,a.kt)("h2",{id:"plugin-view"},"Plugin view"),(0,a.kt)("p",null,"To get plugin view of a participant, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"view-type")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"DytePlatformPluginView"),","),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"const String viewType = 'DytePlatformPluginView';\n\n\n\n\n  final Map<String, dynamic> creationParams = {\n    'id': widget.plugin.id,\n    'name': widget.plugin.name,\n  };\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," both are strings."))}h.isMDXComponent=!0}}]);