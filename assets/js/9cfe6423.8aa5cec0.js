"use strict";(self.webpackChunkchat_2_db=self.webpackChunkchat_2_db||[]).push([[30072],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},l=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=s(n),g=r,f=d["".concat(c,".").concat(g)]||d[g]||u[g]||a;return n?i.createElement(f,p(p({ref:t},l),{},{components:n})):i.createElement(f,p({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,p=new Array(a);p[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:r,p[1]=o;for(var s=2;s<a;s++)p[s]=n[s];return i.createElement.apply(null,p)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},82910:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>d});n(67294);var i=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function p(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const o={title:"Participant Events",description:"Event handling for participants.",sidebar_position:3,tags:["mobile-core","participants","self"]},c=void 0,s={unversionedId:"participants/events",id:"participants/events",title:"Participant Events",description:"Event handling for participants.",source:"@site/docs/ios-core/participants/events.mdx",sourceDirName:"participants",slug:"/participants/events",permalink:"/ios-core/participants/events",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/ios-core/participants/events.mdx",tags:[{label:"mobile-core",permalink:"/ios-core/tags/mobile-core"},{label:"participants",permalink:"/ios-core/tags/participants"},{label:"self",permalink:"/ios-core/tags/self"}],version:"current",lastUpdatedAt:1682412261,formattedLastUpdatedAt:"Apr 25, 2023",sidebarPosition:3,frontMatter:{title:"Participant Events",description:"Event handling for participants.",sidebar_position:3,tags:["mobile-core","participants","self"]},sidebar:"tutorialSidebar",previous:{title:"The participant object",permalink:"/ios-core/participants/participant-object"},next:{title:"Introducing chat",permalink:"/ios-core/chat/introduction"}},l={},d=[{value:"Participant joined",id:"participant-joined",level:2},{value:"Participant left",id:"participant-left",level:2},{value:"Screenshare updates",id:"screenshare-updates",level:2},{value:"Grid change",id:"grid-change",level:2},{value:"Video update",id:"video-update",level:2},{value:"Audio update",id:"audio-update",level:2},{value:"Active speaker",id:"active-speaker",level:2},{value:"Pinned participant",id:"pinned-participant",level:2},{value:"Active participants list change",id:"active-participants-list-change",level:2}],u={toc:d},g="wrapper";function f(e){var{components:t}=e,n=p(e,["components"]);return(0,i.kt)(g,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can subscribe to events for all participants by implementing\n",(0,i.kt)("inlineCode",{parentName:"p"},"DyteParticipantEventsListener")," callback and then passing that object to\n",(0,i.kt)("inlineCode",{parentName:"p"},"meeeting.addParticipantEventsListener(dyteParticipantEventsListener)")," method.\nHere are the supported methods:"),(0,i.kt)("h2",{id:"participant-joined"},"Participant joined"),(0,i.kt)("p",null,"Triggers an event when any participant joins the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantJoin(participant: DyteMeetingParticipant) {\n            // your code here to handle new participant\n        }\n    }\n")),(0,i.kt)("h2",{id:"participant-left"},"Participant left"),(0,i.kt)("p",null,"Triggers an event when any participant leaves the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantLeave(participant: DyteMeetingParticipant) {\n            // your code here to handle participant left from meeting\n        }\n    }\n")),(0,i.kt)("h2",{id:"screenshare-updates"},"Screenshare updates"),(0,i.kt)("p",null,"Triggers an event when there is any change in screenshares in a meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onScreenSharesUpdated() {\n            // your code here to handle screenshares from meeting\n            // you can use `meeting.participants.screenshares` to get latest screenshare participants\n        }\n    }\n")),(0,i.kt)("h2",{id:"grid-change"},"Grid change"),(0,i.kt)("p",null,"Whenever there is any change in ",(0,i.kt)("inlineCode",{parentName:"p"},"GridInfo")," for the room following method is\ncalled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onGridUpdated(gridInfo: GridInfo) {\n            // your code here to handle grid changes.\n        }\n    }\n")),(0,i.kt)("h2",{id:"video-update"},"Video update"),(0,i.kt)("p",null,"Trigger an event when any participant starts / stops video."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onVideoUpdate(videoEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant video toggle update\n        }\n    }\n")),(0,i.kt)("h2",{id:"audio-update"},"Audio update"),(0,i.kt)("p",null,"Trigger an event when any participant starts / stops audio."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onAudioUpdate(audioEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant audio toggle update\n        }\n    }\n")),(0,i.kt)("h2",{id:"active-speaker"},"Active speaker"),(0,i.kt)("p",null,"Trigger an event when any is change in active speaker in the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveSpeakerChanged(participant: DyteMeetingParticipant) {\n            // your code here to handle active speaker\n        }\n\n        func onNoActiveSpeaker() {\n            // your code here to handle no active speaker\n        }\n    }\n")),(0,i.kt)("h2",{id:"pinned-participant"},"Pinned participant"),(0,i.kt)("p",null,"Trigger an event when any is change in pinned participant in the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantPinned(participant: DyteMeetingParticipant) {\n            // your code here to show pinned participant\n        }\n\n        func onParticipantUnpinned() {\n            // your code here to remove pinned participant\n        }\n    }\n")),(0,i.kt)("h2",{id:"active-participants-list-change"},"Active participants list change"),(0,i.kt)("p",null,"Triggers an event when any change in active participants list in the meeting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveParticipantsChanged(active: [DyteMeetingParticipant]) {\n            // your code here to refresh active participants\n        }\n    }\n")))}f.isMDXComponent=!0}}]);