"use strict";(self.webpackChunkchat_2_db=self.webpackChunkchat_2_db||[]).push([[79554],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59911:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>d});n(67294);var r=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const i={title:"Events",description:"Local user events guide.",sidebar_position:2,tags:["flutter-core","local-user","self"]},s="Local User - Events",c={unversionedId:"local-user/events",id:"local-user/events",title:"Events",description:"Local user events guide.",source:"@site/docs/flutter-core/local-user/events.mdx",sourceDirName:"local-user",slug:"/local-user/events",permalink:"/flutter-core/local-user/events",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/flutter-core/local-user/events.mdx",tags:[{label:"flutter-core",permalink:"/flutter-core/tags/flutter-core"},{label:"local-user",permalink:"/flutter-core/tags/local-user"},{label:"self",permalink:"/flutter-core/tags/self"}],version:"current",lastUpdatedAt:1682391353,formattedLastUpdatedAt:"Apr 25, 2023",sidebarPosition:2,frontMatter:{title:"Events",description:"Local user events guide.",sidebar_position:2,tags:["flutter-core","local-user","self"]},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/flutter-core/local-user/introduction"},next:{title:"Manage Media Devices",permalink:"/flutter-core/local-user/manage-media-devices"}},u={},d=[{value:"Room joined",id:"room-joined",level:3},{value:"Video update",id:"video-update",level:3},{value:"Audio update",id:"audio-update",level:3}],p={toc:d},m="wrapper";function f(e){var{components:t}=e,n=l(e,["components"]);return(0,r.kt)(m,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},p,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"local-user---events"},"Local User - Events"),(0,r.kt)("p",null,"You can subscribe to various local user events. For subscribing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Implement ",(0,r.kt)("inlineCode",{parentName:"li"},"DyteSelfEventsListener")," to a class say ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalUserListener"),", and\nlisten to event from ",(0,r.kt)("inlineCode",{parentName:"li"},"DyteSelfEventsListener")," by overriding them. This class\ncan be user to manage your state in the application.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class LocalUserListener with DyteSelfEventsListener {\n\n  ...\n\n  @override\n  void onAudioDevicesUpdated() {\n    /// code to handle onAudioDevicesUpdated() event\n  }\n\n  ...\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now to subscribe, pass the instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalUserListener")," class created above\nto ",(0,r.kt)("inlineCode",{parentName:"li"},"addSelfEventsListener()")," method of ",(0,r.kt)("inlineCode",{parentName:"li"},"dyteClient")," instance as follows:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{2}","{2}":!0},"dyteClient.addSelfEventsListener(\n  // LocalUserListener class instance\n);\n")),(0,r.kt)("h3",{id:"room-joined"},"Room joined"),(0,r.kt)("p",null,"Triggered when the room join event completes and now the meeting is ready to\nproduce and consume media. At this stage, you can move to meeting room. While\nimplementing ",(0,r.kt)("inlineCode",{parentName:"p"},"DyteSelfEventsListener")," we have :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onMeetingRoomJoined() {\n  // When the local user joins the meeting room, this callback is triggered\n  // We can handle the state here.\n}\n\n")),(0,r.kt)("h3",{id:"video-update"},"Video update"),(0,r.kt)("p",null,"Triggered when the user starts / stops the video using ",(0,r.kt)("inlineCode",{parentName:"p"},"enableVideo")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"disableVideo")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onVideoUpdate(bool videoEnabled) {\n  if(isVideoEnabled){\n    // Video is enabled, other users can see the video.\n  } else {\n    // Video is disabled, others users can't see the video.\n  }\n\n  //  or alternatively you can pass the bool through state as demonstrated in example app.\n}\n")),(0,r.kt)("h3",{id:"audio-update"},"Audio update"),(0,r.kt)("p",null,"Triggered when the user starts / stops the audio using ",(0,r.kt)("inlineCode",{parentName:"p"},"enableAudio")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"disableAudio")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@override\nvoid onAudioUpdate(bool audioEnabled) {\n  if (audioEnabled) {\n      // audio is enabled, and other participants in room can hear local user\n    } else {\n      // audio is disabled, and other participants in room can not hear local user.\n    }\n\n  //  or alternatively you can pass the bool through state as demonstrated in example app.\n}\n")),(0,r.kt)("p",null,"There are several other callbacks, that you can implement according to the\nneeds, here's a list of them:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onMeetingRoomJoinStarted()"),": callback when meet room join has started.",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onMeetingRoomDisconnected()"),": callback when meet room join is disconnected.",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onMeetingRoomJoinFailed()"),": callback when meet room join failed.",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onUpdate()"),": callback when any update occurs in the meet room (example any other participant joins the meet).",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onProximityChanged()"),": callback when proximity of your device changes from body (as when phone sleeps when near your ears when on a phone call).",(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("span",{style:{fontSize:"1em",fontWeight:"bold"}},"onAudioDevicesUpdated()"),": callback when the audio devices are updated.",(0,r.kt)("br",null))))}f.isMDXComponent=!0}}]);