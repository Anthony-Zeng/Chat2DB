"use strict";(self.webpackChunkchat_2_db=self.webpackChunkchat_2_db||[]).push([[70896],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},33159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>d,toc:()=>u});n(67294);var r=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={title:"Events",description:"Local user events guide.",sidebar_position:2,tags:["mobile-core","local-user","self"]},s=void 0,d={unversionedId:"local-user/events",id:"local-user/events",title:"Events",description:"Local user events guide.",source:"@site/docs/android-core/local-user/events.mdx",sourceDirName:"local-user",slug:"/local-user/events",permalink:"/android-core/local-user/events",draft:!1,editUrl:"https://github.com/dyte-in/docs/tree/main/docs/android-core/local-user/events.mdx",tags:[{label:"mobile-core",permalink:"/android-core/tags/mobile-core"},{label:"local-user",permalink:"/android-core/tags/local-user"},{label:"self",permalink:"/android-core/tags/self"}],version:"current",lastUpdatedAt:1682475427,formattedLastUpdatedAt:"Apr 26, 2023",sidebarPosition:2,frontMatter:{title:"Events",description:"Local user events guide.",sidebar_position:2,tags:["mobile-core","local-user","self"]},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/android-core/local-user/introduction"},next:{title:"Manage Media Devices",permalink:"/android-core/local-user/manage-media-devices"}},c={},u=[{value:"Local User - Events",id:"local-user---events",level:2},{value:"Room joined",id:"room-joined",level:3},{value:"Video update",id:"video-update",level:3},{value:"Audio update",id:"audio-update",level:3},{value:"Room disconnected update",id:"room-disconnected-update",level:3},{value:"Proximity changed",id:"proximity-changed",level:3},{value:"Waitlist status",id:"waitlist-status",level:3}],p={toc:u},m="wrapper";function f(e){var{components:t}=e,n=a(e,["components"]);return(0,r.kt)(m,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},p,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"local-user---events"},"Local User - Events"),(0,r.kt)("p",null,"You can subscribe to various events on the local user by implementing\n",(0,r.kt)("inlineCode",{parentName:"p"},"DyteSelfEventsListener")," and passing the object to\n",(0,r.kt)("inlineCode",{parentName:"p"},"meeting.addSelfEventsListener(dyteSelfEventsListener)"),"."),(0,r.kt)("h3",{id:"room-joined"},"Room joined"),(0,r.kt)("p",null,"Triggered when the room join event completes and now the meeting is ready to\nproduce and consume media."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onRoomJoined() {\n      super.onRoomJoined()\n    }\n});\n")),(0,r.kt)("h3",{id:"video-update"},"Video update"),(0,r.kt)("p",null,"Triggered when the user starts / stops the video using ",(0,r.kt)("inlineCode",{parentName:"p"},"enableVideo")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"disableVideo")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onVideoUpdate(videoEnabled: Boolean) {\n      super.onVideoUpdate(videoEnabled)\n      if (videoEnabled) {\n        // video is enabled, and other participants in room can see local user\n      } else {\n        // video is disabled, and other participants in room can not see local user.\n      }\n    }\n})\n")),(0,r.kt)("h3",{id:"audio-update"},"Audio update"),(0,r.kt)("p",null,"Triggered when the user starts / stops the audio using ",(0,r.kt)("inlineCode",{parentName:"p"},"enableAudio")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"disableAudio")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onAudioUpdate(audioEnabled: Boolean) {\n      super.onAudioUpdate(videoEnabled)\n      if (audioEnabled) {\n        // audio is enabled, and other participants in room can hear local user\n      } else {\n        // audio is disabled, and other participants in room can not hear local user.\n      }\n    }\n})\n")),(0,r.kt)("h3",{id:"room-disconnected-update"},"Room disconnected update"),(0,r.kt)("p",null,"Triggered when the user is disconnected due to media/network errors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onMeetingRoomDisconnected() {\n      super.onMeetingRoomDisconnected()\n    }\n})\n")),(0,r.kt)("h3",{id:"proximity-changed"},"Proximity changed"),(0,r.kt)("p",null,"Triggered when there is any change in proximity. Meaning if device is near ear\npiece which triggers display on/off."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onProximityChanged(isNear: Boolean) {\n      super.onProximityChanged(isNear)\n      // isNear\n      // if true, display should be turned off, as user might be speaking through earpience\n      // if false, display should be tunred on, as user might be looking at display and listening through speaker/earphones.\n    }\n})\n")),(0,r.kt)("h3",{id:"waitlist-status"},"Waitlist status"),(0,r.kt)("p",null,"For meetings whose waiting room is enabled:"),(0,r.kt)("p",null,"To get status of localUser in waiting room we can use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val waitListStatus = meeting.localUser.waitListStatus\n")),(0,r.kt)("p",null,"Developers can listen to those changes in ",(0,r.kt)("inlineCode",{parentName:"p"},"onWaitListStatusUpdate()")," callbacks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\n    override fun onWaitListStatusUpdate(waitListStatus: WaitListStatus) {\n      super.onWaitListStatusUpdate(waitListStatus)\n    }\n});\n")))}f.isMDXComponent=!0}}]);